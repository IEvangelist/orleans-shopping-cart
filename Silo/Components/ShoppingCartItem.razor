<MudCard Class="mud-height-full">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@CartItem.Product.Name</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardMedia Image="@CartItem.Product.ImageUrl" Height="180" />
    <MudCardContent>
        <MudText Typo="Typo.body1">@CartItem.Product.Description</MudText>
        <MudNumericField Label="Desired quantity" Variant=Variant.Text
            Min="1" Max="@CartItem.Product.Quantity" @bind-Value="_desiredQuantity" />
    </MudCardContent>
    <MudCardActions>
        <MudFab Icon="@Icons.Filled.RemoveShoppingCart" Color="Color.Warning"
            Title=@Title OnClick=OnRemoveAsync Size=Size.Small Class="ml-2 mr-4"/>
        <MudFab Icon="@Icons.Filled.Save" Color="Color.Primary"
            Disabled=@(_desiredQuantity == CartItem.Quantity)
            OnClick=OnUpdateAsync Size=Size.Small />
        <MudText Typo="Typo.body1" Class="flex-1 align-self-end"
            Align=Align.Right>
            @CartItem.TotalPrice.ToString("C2")
        </MudText>
    </MudCardActions>
</MudCard>

@code {
    int _desiredQuantity;
    string Title => $"Update {CartItem.Product.Name} quantity in cart";

    [Parameter, EditorRequired]
    public CartItem CartItem { get; set; } = null!;

    [Parameter, EditorRequired]
    public EventCallback<ProductDetails> OnRemoved { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<(int Quantity, ProductDetails Product)> OnUpdated { get; set; }

    protected override void OnParametersSet() => _desiredQuantity = CartItem.Quantity;

    Task OnRemoveAsync() => TryInvokeDelegate(OnRemoved, CartItem.Product);

    Task OnUpdateAsync() => TryInvokeDelegate(OnUpdated, (_desiredQuantity, CartItem.Product));

    Task TryInvokeDelegate<TArg>(EventCallback<TArg> callback, TArg args) =>
        callback.HasDelegate
            ? callback.InvokeAsync(args)
            : Task.CompletedTask;
}
