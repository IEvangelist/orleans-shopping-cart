<div id="new-product-modal" class="modal" role="dialog"
    tabindex="-1" style="display:@_modalDisplay">
    <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Product</h5>
        <button type="button" class="btn-close" aria-label="Close" @onclick=@(async _ => await CloseAsync())></button>
      </div>
      <div class="modal-body">
        <EditForm Model=@_product OnValidSubmit=@OnValidSubmit>
          <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="_product.Name" />
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="_product.Description" />
          </div>
          <div class="mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="_product.Quantity" />
          </div>
          <div class="mb-3">
            <label for="price" class="form-label">Unit Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="_product.UnitPrice" />
          </div>
          <div class="mb-3">
            <label for="imageUrl" class="form-label">Image URL</label>
            <InputText id="imageUrl" class="form-control" @bind-Value="_product.ImageUrl" />
          </div>
        </EditForm>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick=@(async _ => await CloseAsync())>Discard</button>
        <button type="submit" class="btn btn-primary">Create</button>
      </div>
    </div>
  </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    ProductDetails _product = new();
    bool _isSaving;

    string _modalDisplay = "none";
    string _modalClass = "";
    bool _showBackdrop;

    [Parameter, EditorRequired]
    public EventCallback<ProductDetails> OnProductCreated { get; set; }

    public async Task OpenAsync()
    {
        _modalDisplay = "block";
        await Task.Delay(100);

        _modalClass = "show";
        _showBackdrop = true;

        StateHasChanged();
    }

    public async Task CloseAsync()
    {
        _modalDisplay = "none";
        await Task.Delay(100);

        _modalClass = "";
        _showBackdrop = false;

        StateHasChanged();
    }

    async Task OnValidSubmit()
    {
        if (_product is not null && OnProductCreated.HasDelegate)
        {
            try
            {
                _isSaving = true;
                await OnProductCreated.InvokeAsync(_product);
            }
            finally
            {
                _isSaving = false;
            }            
        }
    }
}
